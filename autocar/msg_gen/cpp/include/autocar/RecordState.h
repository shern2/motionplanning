/* Auto-generated by genmsg_cpp for file /home/ss/work/motionplanning/autocar/msg/RecordState.msg */
#ifndef AUTOCAR_MESSAGE_RECORDSTATE_H
#define AUTOCAR_MESSAGE_RECORDSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace autocar
{
template <class ContainerAllocator>
struct RecordState_ {
  typedef RecordState_<ContainerAllocator> Type;

  RecordState_()
  : state(0)
  {
  }

  RecordState_(const ContainerAllocator& _alloc)
  : state(0)
  {
  }

  typedef int32_t _state_type;
  int32_t state;


  typedef boost::shared_ptr< ::autocar::RecordState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autocar::RecordState_<ContainerAllocator>  const> ConstPtr;
}; // struct RecordState
typedef  ::autocar::RecordState_<std::allocator<void> > RecordState;

typedef boost::shared_ptr< ::autocar::RecordState> RecordStatePtr;
typedef boost::shared_ptr< ::autocar::RecordState const> RecordStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::autocar::RecordState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::autocar::RecordState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace autocar

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::autocar::RecordState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::autocar::RecordState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::autocar::RecordState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7a2f37ef2ba405f0c7a15cc72663d6f0";
  }

  static const char* value(const  ::autocar::RecordState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7a2f37ef2ba405f0ULL;
  static const uint64_t static_value2 = 0xc7a15cc72663d6f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::autocar::RecordState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "autocar/RecordState";
  }

  static const char* value(const  ::autocar::RecordState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::autocar::RecordState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 state\n\
\n\
";
  }

  static const char* value(const  ::autocar::RecordState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::autocar::RecordState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::autocar::RecordState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct RecordState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autocar::RecordState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::autocar::RecordState_<ContainerAllocator> & v) 
  {
    s << indent << "state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTOCAR_MESSAGE_RECORDSTATE_H

